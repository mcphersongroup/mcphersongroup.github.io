---
title: "Meet the Group"
listing:
  - id: pi
    include: 
      people_group: "pi"
    exclude:
      external: true
    template: ../_ejs/people-box.ejs
    type: grid
    fields: [title, subtitle, image, education]
  - id: researcher
    include: 
      people_group: "researcher"
    exclude:
      external: true
    template: ../_ejs/people-box.ejs
    sort: last
    type: grid
    fields: [title, subtitle, image, education]
  - id: postdoc
    include: 
      people_group: "postdoc"
    exclude:
      external: true
    template: ../_ejs/people-box.ejs
    sort: last    
    type: grid
    fields: [title, subtitle, image, education]
  - id: gradstudent
    include: 
      people_group: "gradstudent"
    exclude:
      external: true
    template: ../_ejs/people-box.ejs
    sort: last
    type: grid
    fields: [title, subtitle, image, education]
  - id: post-bac
    include: 
      people_group: "post-bac"
    exclude:
      external: true
    template: ../_ejs/people-box.ejs
    sort: last
    type: grid
    fields: [title, subtitle, image, education]
  - id: alumni
    include: 
      people_group: "alumni"
    exclude:
      external: true
    template: ../_ejs/alumni-box.ejs
    sort: last
    type: grid
    fields: [title, subtitle, image, education, altsubtitle, alteducation]
page-layout: full
jupyter: python3
---

## Our Global Team

Our research group members are located around the world. Explore the interactive map to see where our team is based:

```{python}
#| echo: false
#| output: asis

from IPython.display import HTML
import json

# Team member locations data
team_locations = [
    {
        'name': 'Jacob K. McPherson',
        'role': 'Principal Investigator',
        'location': 'University of Houston',
        'city': 'Houston, TX',
        'coordinates': [29.7174, -95.4018],
        'info': 'Ph.D. Pharmacology, University of Houston'
    }
    # Additional team members can be added here as the group grows
]

# Create self-contained interactive map widget
# This uses a Jupyter Python cell to generate an interactive map
# Falls back to SVG when external CDNs are blocked
html_content = f"""
<div id="jupyter-map-widget" style="height: 400px; width: 100%; border-radius: 8px; border: 1px solid #ddd; margin-bottom: 2rem; position: relative; overflow: hidden;">
  <!-- Fallback SVG map for when CDNs are blocked -->
  <div id="svg-fallback-map" style="width: 100%; height: 100%; background: linear-gradient(135deg, #4fc3f7 0%, #29b6f6 100%); display: block;">
    <svg width="100%" height="100%" viewBox="0 0 800 400" style="display: block;">
      <defs>
        <style>
          .continent {{ fill: #2e7d32; stroke: #1b5e20; stroke-width: 1; opacity: 0.8; }}
          .marker {{ cursor: pointer; transition: all 0.3s ease; }}
          .marker:hover {{ transform: scale(1.2); }}
          .marker-outer {{ fill: rgba(255, 255, 255, 0.3); stroke: #fff; stroke-width: 2; }}
          .marker-inner {{ fill: #003366; stroke: #fff; stroke-width: 2; }}
          .map-title {{ fill: white; font-size: 18px; font-weight: bold; text-anchor: middle; }}
        </style>
      </defs>
      
      <!-- Simplified world continents -->
      <path class="continent" d="M120,80 L200,60 L280,70 L320,100 L300,140 L250,160 L180,150 L100,120 Z"/>
      <path class="continent" d="M220,160 L260,170 L270,240 L250,280 L230,290 L210,270 L200,210 Z"/>
      <path class="continent" d="M420,60 L480,50 L500,80 L480,100 L440,90 L420,70 Z"/>
      <path class="continent" d="M440,100 L480,110 L490,180 L470,240 L450,250 L430,230 L420,160 L430,120 Z"/>
      <path class="continent" d="M500,40 L600,30 L650,50 L680,80 L700,60 L720,90 L690,120 L620,110 L580,100 L520,90 Z"/>
      <path class="continent" d="M620,210 L680,200 L700,220 L690,240 L650,245 L620,235 Z"/>
      
      <!-- Team member marker for Houston, TX -->
      <g class="marker" transform="translate(266, 156)" data-member="0">
        <circle class="marker-outer" r="12">
          <animate attributeName="r" values="12;16;12" dur="2s" repeatCount="indefinite"/>
        </circle>
        <circle class="marker-inner" r="6"/>
        
        <!-- Tooltip -->
        <g class="tooltip" style="opacity: 0; pointer-events: none;">
          <rect x="-80" y="-60" width="160" height="50" rx="5" fill="rgba(0,0,0,0.8)" stroke="rgba(255,255,255,0.2)"/>
          <text x="0" y="-45" fill="white" font-size="12" font-weight="bold" text-anchor="middle">Jacob K. McPherson</text>
          <text x="0" y="-32" fill="white" font-size="10" text-anchor="middle">Principal Investigator</text>
          <text x="0" y="-19" fill="white" font-size="10" text-anchor="middle">University of Houston, TX</text>
        </g>
      </g>
      
      <text class="map-title" x="400" y="30">McPherson Group Global Locations</text>
      <text x="400" y="390" fill="rgba(255,255,255,0.7)" font-size="10" text-anchor="middle">Interactive Jupyter Widget Map</text>
    </svg>
  </div>
  
  <!-- Leaflet map container (hidden by default, shown when CDNs work) -->
  <div id="leaflet-map" style="height: 100%; width: 100%; display: none;"></div>
</div>

<!-- Try to load Leaflet from CDN, fall back to SVG if blocked -->
<script>
(function() {{
  // Team locations data from Python
  const locations = {json.dumps(team_locations)};
  
  // Try to load Leaflet
  const leafletCSS = document.createElement('link');
  leafletCSS.rel = 'stylesheet';
  leafletCSS.href = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';
  
  const leafletJS = document.createElement('script');
  leafletJS.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
  
  // Timeout for CDN loading
  let cdnTimeout = setTimeout(() => {{
    console.log('Jupyter Map Widget: Using SVG fallback due to CDN restrictions');
    initializeSVGMap();
  }}, 3000);
  
  leafletJS.onload = function() {{
    clearTimeout(cdnTimeout);
    if (typeof L !== 'undefined') {{
      console.log('Jupyter Map Widget: Leaflet loaded successfully');
      initializeLeafletMap();
    }} else {{
      initializeSVGMap();
    }}
  }};
  
  leafletJS.onerror = function() {{
    clearTimeout(cdnTimeout);
    console.log('Jupyter Map Widget: Leaflet failed to load, using SVG fallback');
    initializeSVGMap();
  }};
  
  function initializeLeafletMap() {{
    document.getElementById('svg-fallback-map').style.display = 'none';
    document.getElementById('leaflet-map').style.display = 'block';
    
    const map = L.map('leaflet-map').setView([30, -10], 2);
    
    L.tileLayer('https://tiles.stadiamaps.com/tiles/stamen_watercolor/{{z}}/{{x}}/{{y}}.jpg', {{
      attribution: '&copy; <a href="https://stadiamaps.com/" target="_blank">Stadia Maps</a> &copy; <a href="https://stamen.com/" target="_blank">Stamen Design</a> &copy; <a href="https://openmaptiles.org/" target="_blank">OpenMapTiles</a> &copy; <a href="https://www.openstreetmap.org/about" target="_blank">OpenStreetMap</a> contributors',
      maxZoom: 16
    }}).addTo(map);
    
    locations.forEach(member => {{
      const marker = L.marker(member.coordinates).addTo(map);
      const popupContent = `
        <div style="text-align: center; min-width: 200px; padding: 10px; font-family: Arial, sans-serif;">
          <h4 style="margin: 0 0 8px 0; color: #003366; font-size: 16px;">${{member.name}}</h4>
          <p style="margin: 0 0 4px 0; font-weight: bold; color: #666; font-size: 14px;">${{member.role}}</p>
          <p style="margin: 0 0 4px 0; font-size: 13px;">${{member.location}}</p>
          <p style="margin: 0; font-size: 12px; color: #888;">${{member.city}}</p>
        </div>`;
      marker.bindPopup(popupContent);
    }});
    
    if (locations.length > 0) {{
      const group = new L.featureGroup(locations.map(member => L.marker(member.coordinates)));
      map.fitBounds(group.getBounds().pad(0.1));
      if (map.getZoom() > 8) map.setZoom(8);
    }}
  }}
  
  function initializeSVGMap() {{
    // Add interactivity to SVG markers
    document.querySelectorAll('.marker').forEach(marker => {{
      const tooltip = marker.querySelector('.tooltip');
      
      marker.addEventListener('mouseenter', () => {{
        if (tooltip) tooltip.style.opacity = '1';
      }});
      
      marker.addEventListener('mouseleave', () => {{
        if (tooltip) tooltip.style.opacity = '0';
      }});
    }});
  }}
  
  // Try to load the resources
  document.head.appendChild(leafletCSS);
  document.head.appendChild(leafletJS);
}})();
</script>

<style>
#jupyter-map-widget svg {{
  filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
}}

.marker {{
  transform-origin: center;
}}

.tooltip {{
  transition: opacity 0.3s ease;
}}
</style>
"""

print(html_content)
```

## Principal Investigator
::: {#pi}
:::


:::{.sand-background}
## Research Scientists
::: {#researcher}
:::


:::
## Postdoctoral Fellows
::: {#postdoc}
:::


:::{.sand-background}
## Graduate Students
::: {#gradstudent}
:::

:::
## Post Baccalaureate Researchers
::: {#post-bac}
:::

:::{.sand-background}
## Alumni
::: {#alumni}
:::


:::
