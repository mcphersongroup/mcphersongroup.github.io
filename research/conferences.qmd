---
title: Conference Map and Calendar
jupyter: python3
---

<!-- 
This file contains the conference map and calendar for the research page.
To edit conference information:
1. Find the 'conferences' list in the first Python code block below
2. Add, remove, or modify conference entries following the existing format
3. Each conference needs: name, location, lat, lon, start_date, end_date, and type
4. The map and table will automatically update based on this data

This file is included in research/index.qmd and renders at the bottom of the research page.
-->

## Conference Map and Calendar

### Upcoming Conferences and Events

```{python}
#| echo: false
#| warning: false

from ipyleaflet import Map, Marker, AwesomeIcon, Popup
from ipywidgets import HTML
import datetime

# Create a map centered on North America
m = Map(center=(39.8283, -98.5795), zoom=4)

# Conference data - locations, dates, and details
conferences = [
    {
        "name": "International Conference on Infectious Diseases",
        "location": "San Francisco, CA",
        "lat": 37.7749,
        "lon": -122.4194,
        "start_date": "2025-03-15",
        "end_date": "2025-03-18",
        "type": "Conference"
    },
    {
        "name": "Antimicrobial Resistance Summit",
        "location": "Boston, MA",
        "lat": 42.3601,
        "lon": -71.0589,
        "start_date": "2025-05-20",
        "end_date": "2025-05-23",
        "type": "Summit"
    },
    {
        "name": "Microbiome Research Symposium",
        "location": "Austin, TX",
        "lat": 30.2672,
        "lon": -97.7431,
        "start_date": "2025-07-10",
        "end_date": "2025-07-12",
        "type": "Symposium"
    },
    {
        "name": "Healthcare Analytics Conference",
        "location": "Chicago, IL",
        "lat": 41.8781,
        "lon": -87.6298,
        "start_date": "2025-09-08",
        "end_date": "2025-09-10",
        "type": "Conference"
    },
    {
        "name": "Public Health Data Science Workshop",
        "location": "Seattle, WA",
        "lat": 47.6062,
        "lon": -122.3321,
        "start_date": "2025-11-03",
        "end_date": "2025-11-05",
        "type": "Workshop"
    }
]

# Add markers for each conference location
for conf in conferences:
    icon = AwesomeIcon(
        name='calendar',
        marker_color='red',
        icon_color='white'
    )
    marker = Marker(
        location=(conf["lat"], conf["lon"]),
        draggable=False,
        title=conf["name"],
        icon=icon
    )
    
    # Format dates for display
    start = datetime.datetime.strptime(conf["start_date"], "%Y-%m-%d").strftime("%B %d, %Y")
    end = datetime.datetime.strptime(conf["end_date"], "%Y-%m-%d").strftime("%B %d, %Y")
    
    marker.popup = HTML(
        value=f"<div style='width: 200px;'><b>{conf['name']}</b><br><i>{conf['type']}</i><br>{conf['location']}<br>{start} - {end}</div>"
    )
    m.add_layer(marker)

m
```

### Conference Calendar

```{python}
#| echo: false
#| warning: false

import pandas as pd
from datetime import datetime

# Create a DataFrame for the conference calendar
calendar_data = []
for conf in conferences:
    start = datetime.strptime(conf["start_date"], "%Y-%m-%d")
    end = datetime.strptime(conf["end_date"], "%Y-%m-%d")
    duration = (end - start).days + 1
    
    calendar_data.append({
        "Event": conf["name"],
        "Type": conf["type"],
        "Location": conf["location"],
        "Start Date": start.strftime("%B %d, %Y"),
        "End Date": end.strftime("%B %d, %Y"),
        "Duration (days)": duration
    })

df = pd.DataFrame(calendar_data)

# Display as a styled table
from IPython.display import display, HTML

def create_calendar_html(df):
    html = """
    <style>
        .calendar-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            font-size: 14px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .calendar-table thead tr {
            background-color: #007bff;
            color: white;
            text-align: left;
            font-weight: bold;
        }
        .calendar-table th,
        .calendar-table td {
            padding: 12px 15px;
            border: 1px solid #ddd;
        }
        .calendar-table tbody tr {
            border-bottom: 1px solid #dddddd;
        }
        .calendar-table tbody tr:nth-of-type(even) {
            background-color: #f3f3f3;
        }
        .calendar-table tbody tr:hover {
            background-color: #e3f2fd;
            cursor: pointer;
        }
        .event-type {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 3px;
            font-size: 12px;
            font-weight: bold;
        }
        .type-conference {
            background-color: #4CAF50;
            color: white;
        }
        .type-summit {
            background-color: #FF9800;
            color: white;
        }
        .type-symposium {
            background-color: #2196F3;
            color: white;
        }
        .type-workshop {
            background-color: #9C27B0;
            color: white;
        }
    </style>
    <table class="calendar-table">
        <thead>
            <tr>
                <th>Event Name</th>
                <th>Type</th>
                <th>Location</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Duration</th>
            </tr>
        </thead>
        <tbody>
    """
    
    for _, row in df.iterrows():
        type_class = f"type-{row['Type'].lower()}"
        html += f"""
            <tr>
                <td><strong>{row['Event']}</strong></td>
                <td><span class="event-type {type_class}">{row['Type']}</span></td>
                <td>{row['Location']}</td>
                <td>{row['Start Date']}</td>
                <td>{row['End Date']}</td>
                <td>{row['Duration (days)']} days</td>
            </tr>
        """
    
    html += """
        </tbody>
    </table>
    """
    return html

display(HTML(create_calendar_html(df)))
```
